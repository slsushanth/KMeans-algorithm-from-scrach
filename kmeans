from IPython.lib.security import random
from numpy.random.mtrand import randint
from numpy.core.multiarray import array
from numpy.core.numeric import indices
from re import I
from numpy.lib.function_base import append
from numpy.core.fromnumeric import argmin
import numpy as np
import matplotlib.pyplot as plt


class Kmeans_clustering:

    def __init__(self, k=3):
        self.k = k
        self.centroids = None

    @staticmethod
    def euclidean_distance(data_ponts, centroids):
        return np.sqrt(np.sum((centroids - data_ponts)** 2, axis=1))

    def fit(self, X, max_iterations=200):
        self.centroids = np.random.uniform(np.amin(X, axis=0), np.amax(X, axis=0),
                                            size=(self.k, X.shape[1]))

        for _ in range(max_iterations):
            y = []

            for data_points in X:
                distance = Kmeans_clustering.euclidean_distance(data_points, self.centroids)
            cluster_num = np.argmin(distance)
            y.append(cluster_num)

            y = np.array(X)

            cluster_indices = []

            for i in range(self.k):
                cluster_indices.append(np.argwhere(y==i))

            clusters_centers = []

            for i, indices in enumerate(cluster_indices):
                if len(indices) == 0:
                    clusters_centers.append(self.centroids[i])


                else:
                  clusters_centers.append(np.mean(X[indices], axis=0)[0])

            if np.max(self.centroids - np.array(clusters_centers)) < 0.0001:
                break
            else:
               self.centroids = np.array((clusters_centers))

        return y




random_points = np.random.randint(0,100,(100,2))

kmeans = Kmeans_clustering(k=3)
labels = kmeans.fit(random_points)

plt.scatter(random_points[:, 1], random_points[:, 0], c=labels)
plt.scatter(kmeans.centroids[:, 0], kmeans.centroids[:, 1], c=range(len(kmeans.centroids)),
            marker="*", s=200)
plt.show()
